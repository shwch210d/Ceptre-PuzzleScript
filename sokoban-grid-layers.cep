%%% Simulating movement on a 2D square grid %%%

entity : type.
crate : entity.
player : entity.
counter : entity.
obstacle : entity.
fallable : entity.

nat : type.
z : nat.
s nat : nat.

#builtin NAT nat.
#builtin NAT_ZERO z.
#builtin NAT_SUCC s.

lt nat nat : bwd.
lt z (s N).
lt (s N) (s M)
  <- lt N M.

collsionlayer : type.
l1 : collsionlayer.
l2 : collsionlayer.
%l3 : collsionlayer.

cell : type.
xy nat nat : cell.

width nat : bwd.
width 5.

% on L C E  means entity E is on cell C of collision layer L
on collsionlayer cell entity : pred.
% empty L C means cell C on collision layer L is empty (possible for the player/a crate to move
% onto)
empty collsionlayer cell : pred.



direction : type.
up : direction.
down : direction.
left : direction.
right : direction.

%  00 01 02
%  10 11 12
%  20 21 22

% in_dir D C1 C2  means  cell C2 is in direction D from cell C1
in_dir direction cell cell : bwd.
in_dir right (xy X Y) (xy (s X) Y)
  <- width W
  <- lt (s X) W.
in_dir down  (xy X Y) (xy X (s Y))
  <- width W
  <- lt (s Y) W.
in_dir left  (xy (s X) Y ) (xy X Y).
in_dir up    (xy X (s Y) ) (xy X Y).


% boundary D C1 C2 means cell C2 is the boundary in direction D from cell C1
boundary direction cell cell : bwd.
boundary right (xy X Y) (xy 4 Y).
boundary down  (xy X Y) (xy X 4).
boundary left  (xy X Y) (xy 0 Y).
boundary up    (xy X Y) (xy X 0).


stage play = {

  %   [@][_]  -->  [_][@]
  move_empty : 
    on L1 C1 player * in_dir D C1 C2 * empty L1 C2
    -o empty L1 C1 * on L1 C2 player.

  %   [@][#][_] --> [_][@][#]
  move_push  : 
    on L1 C1 player * in_dir D C1 C2 * on L1 C2 crate * in_dir D C2 C3 * empty L1 C3
    -o empty L1 C1 * on L1 C2 player * on L1 C3 crate.

  %   [@][O][_] --> [_][@][O]
  push_obstacle : 
    on L1 C1 player * in_dir D C1 C2 * on L1 C2 obstacle * in_dir D C2 C3 * empty L1 C3
    -o empty L1 C1 * on L1 C2 player * on L1 C3 obstacle.

  %   [#][#][#] --> [_][_][_]
  disappear :
	on L1 C1 crate * in_dir D C1 C2 * on L1 C2 crate * in_dir D C2 C3 * on L1 C3 crate 
	-o empty L1 C1 * empty L1 C2 * empty L1 C3.


  % If the player has moved across 3 consecutive empty cells, 
  % a random crate will be generated and placed in the middle
  %random_crate :
  %	on l2 C1 counter * in_dir D C1 C2 * on l2 C2 counter * in_dir D C2 C3 * on l2 C3 counter 
  %	-o empty l2 C1 * empty l2 C2 * empty l2 C3 * on l1 C2 crate.


  % push a crate till it reaches the boundary
  move_push_boundary : 
    on L1 C1 player * in_dir D C1 C2 * on L1 C2 crate * boundary D C2 C3
    -o empty L1 C1 * on L1 C2 player * on L1 C3 crate.


  % a fallable object can fall down on the ground if the cell below it is empty
  object_falling : 
    on L1 C1 fallable * in_dir down C1 C2 * empty L1 C2 * boundary down C1 C3
    -o empty L1 C1 * on L1 C3 fallable.

}
#interactive play.

%  @ player
%  # crate
%  * fallable
%  O obstacle
%   _ _ _ _ _
%   # _ # _ _
%   _ _ _ * _
%   @ # _ O _
%   _ _ _ _ _

context init = {
  empty l1 (xy 0 0),        empty l1 (xy 1 0),       empty l1 (xy 2 0),       empty l1 (xy 3 0),          empty l1 (xy 4 0),
  on   l1 (xy 0 1) crate,   empty l1  (xy 1 1),      on l1 (xy 2 1) crate,    empty l1 (xy 3 1),          empty l1 (xy 4 1),
  empty l1 (xy 0 2),        empty l1 (xy 1 2),       empty l1 (xy 2 2),       on l1 (xy 3 2) fallable,    empty l1 (xy 4 2),
  on l1 (xy 0 3) player,    on l1 (xy 1 3) crate,    empty l1 (xy 2 3),       on l1 (xy 3 3) obstacle,    empty l1 (xy 4 3), 
  empty l1 (xy 0 4),        empty l1 (xy 1 4),       empty l1 (xy 2 4),       empty l1 (xy 3 4),          empty l1 (xy 4 4)
}.

#trace _ play init.



